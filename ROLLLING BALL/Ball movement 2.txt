using UnityEngine;
using UnityEngine.SceneManagement;

public class BallMovement : MonoBehaviour
{
    private int value = 0;
    private int health = 2; // Initial health
    public float speed = 10f;
    public Transform cameraTransform;
    public Transform spawnPoint;
    public float fallThreshold = -10f;
    private int collectiblesCount = 0;
    private Rigidbody rb;
    private bool hasStarted = false; // Track if movement has started

    void Start()
    {
        rb = GetComponent<Rigidbody>();
        Respawn();
    }

    void Update()
    {
        value = collectiblesCount;

        // Get movement input
        float moveHorizontal = Input.GetAxis("Horizontal");
        float moveVertical = Input.GetAxis("Vertical");

        // If the game hasn't started yet, wait for input
        if (!hasStarted)
        {
            if (moveHorizontal != 0 || moveVertical != 0)
            {
                hasStarted = true; // Start movement
            }
            else
            {
                rb.velocity = Vector3.zero; // Keep ball still
                return; // Exit function early
            }
        }

        // Get camera directions
        Vector3 cameraForward = cameraTransform.forward;
        Vector3 cameraRight = cameraTransform.right;

        cameraForward.y = 0;
        cameraRight.y = 0;

        cameraForward.Normalize();
        cameraRight.Normalize();

        // Calculate movement direction
        Vector3 movement = (cameraForward * moveVertical + cameraRight * moveHorizontal).normalized;

        // Apply movement force
        rb.AddForce(movement * speed);

        // Check if the ball has fallen off the map
        if (transform.position.y < fallThreshold)
        {
            hasStarted = false; // Reset movement state
            Respawn();
        }
    }

    // Function to respawn the ball
    void Respawn()
    {
        transform.position = spawnPoint.position;
        rb.velocity = Vector3.zero;
        rb.angularVelocity = Vector3.zero;
    }

    // Detect collisions
    private void OnCollisionEnter(Collision collision)
    {
        if (collision.gameObject.name.Contains("Obs"))
        {
            hasStarted = false; // Reset game state on collision
            Respawn();
        }

        if (collision.gameObject.name.Contains("NextLevel"))
        {
            LoadNextLevel();  // Load next level when touching the goal
        }
    }

    // Detect when the ball triggers a collectible
    private void OnTriggerEnter(Collider other)
    {
        if (other.gameObject.name.Contains("Coin"))
        {
            collectiblesCount++;
            Destroy(other.gameObject);  // Destroy the collectible
            Debug.Log("Collected an item! Total collected: " + collectiblesCount);
        }
    }

    // Function to load the next level in the build settings
    void LoadNextLevel()
    {
        int currentSceneIndex = SceneManager.GetActiveScene().buildIndex;
        if (currentSceneIndex < SceneManager.sceneCountInBuildSettings - 1)
        {
            SceneManager.LoadScene(currentSceneIndex + 1);
        }
        else
        {
            Debug.Log("No more levels. Restarting the game.");
            SceneManager.LoadScene(0);  // Restart from the first level
        }
    }
}
